import{scheduleRevalidate as t}from"@glimmer/global-context";const e={},n=0,i=1,r=NaN;let l=1;function o(){l++}const a=1,s=Symbol("TAG_COMPUTE");function u(t){return t[s]()}function c(t,e){return e>=t[s]()}const f=Symbol("TAG_TYPE");let d;class h{static combine(t){switch(t.length){case 0:return m;case 1:return t[0];default:{let e=new h(2);return e.subtag=t,e}}}revision=1;lastChecked=1;lastValue=1;isUpdating=!1;subtag=null;subtagBufferCache=null;[f];constructor(t){this[f]=t}[s](){let{lastChecked:t}=this;if(!0===this.isUpdating)this.lastChecked=++l;else if(t!==l){this.isUpdating=!0,this.lastChecked=l;try{let{subtag:t,revision:e}=this;if(null!==t)if(Array.isArray(t))for(const n of t){let t=n[s]();e=Math.max(t,e)}else{let n=t[s]();n===this.subtagBufferCache?e=Math.max(e,this.lastValue):(this.subtagBufferCache=null,e=Math.max(e,n))}this.lastValue=e}finally{this.isUpdating=!1}}return this.lastValue}static updateTag(t,e){let n=t,i=e;i===m?n.subtag=null:(n.subtagBufferCache=i[s](),n.subtag=i)}static dirtyTag(e,n){e.revision=++l,t()}}const g=h.dirtyTag,p=h.updateTag;function b(){return new h(0)}function y(){return new h(a)}const m=new h(3);function w(t){return t===m}class v{[f]=100;[s](){return NaN}}const T=new v;class A{[f]=101;[s](){return l}}const S=new A,k=h.combine;let C=y(),E=y(),M=y();u(C),g(C),u(C),p(C,k([E,M])),u(C),g(E),u(C),g(M),u(C),p(C,M),u(C),g(M),u(C);const N=new WeakMap;function x(t,e,n){let i=void 0===n?N.get(t):n;if(void 0===i)return;let r=i.get(e);void 0!==r&&g(r,!0)}function U(t){let e=N.get(t);return void 0===e&&(e=new Map,N.set(t,e)),e}function V(t,e,n){let i=void 0===n?U(t):n,r=i.get(e);return void 0===r&&(r=y(),i.set(e,r)),r}class G{tags=new Set;last=null;add(t){t!==m&&(this.tags.add(t),this.last=t)}combine(){let{tags:t}=this;return 0===t.size?m:1===t.size?this.last:k(Array.from(this.tags))}}let I=null;const _=[];function B(t){_.push(I),I=new G}function L(){let t=I;return I=_.pop()||null,function(t){if(null==t)throw new Error("Expected value to be present");return t}(t).combine()}function O(){_.push(I),I=null}function R(){I=_.pop()||null}function P(){for(;_.length>0;)_.pop();I=null}function z(){return null!==I}function W(t){null!==I&&I.add(t)}const Y=Symbol("FN"),j=Symbol("LAST_VALUE"),D=Symbol("TAG"),F=Symbol("SNAPSHOT");function H(t,e){return{[Y]:t,[j]:void 0,[D]:void 0,[F]:-1}}function q(t){let e=t[Y],n=t[D],i=t[F];if(void 0!==n&&c(n,i))W(n);else{B();try{t[j]=e()}finally{n=L(),t[D]=n,t[F]=u(n),W(n)}}return t[j]}function J(t){return w(t[D])}function K(t,e){let n;B();try{t()}finally{n=L()}return n}function Q(t){O();try{return t()}finally{R()}}function X(t,e){let n=new WeakMap,i="function"==typeof e;return{getter:function(r){let l;return W(V(r,t)),i&&!n.has(r)?(l=e.call(r),n.set(r,l)):l=n.get(r),l},setter:function(e,i){x(e,t),n.set(e,i)}}}const Z=Symbol("GLIMMER_VALIDATOR_REGISTRATION"),$=function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();if(!0===$[Z])throw new Error("The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.");$[Z]=!0;export{d as ALLOW_CYCLES,s as COMPUTE,n as CONSTANT,m as CONSTANT_TAG,S as CURRENT_TAG,A as CurrentTag,i as INITIAL,r as VOLATILE,T as VOLATILE_TAG,v as VolatileTag,B as beginTrackFrame,O as beginUntrackFrame,o as bump,k as combine,W as consumeTag,H as createCache,b as createTag,y as createUpdatableTag,e as debug,g as dirtyTag,x as dirtyTagFor,L as endTrackFrame,R as endUntrackFrame,q as getValue,J as isConst,w as isConstTag,z as isTracking,P as resetTracking,V as tagFor,U as tagMetaFor,K as track,X as trackedData,Q as untrack,p as updateTag,c as validateTag,u as valueForTag};
//# sourceMappingURL=index.js.map
