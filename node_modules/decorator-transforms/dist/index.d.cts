import * as Babel from '@babel/core';
import { types } from '@babel/core';
import { Importer, ImportUtil } from 'babel-import-util';

interface State extends Babel.PluginPass {
    currentClassBodies: types.ClassBody[];
    currentObjectExpressions: {
        node: types.ObjectExpression;
        decorated: [
            "field" | "method",
            types.Expression,
            types.Expression[]
        ][];
    }[];
    opts: Options;
    runtime: (i: Importer, fnName: string) => types.Expression;
    util: ImportUtil;
    optsWithDefaults: Required<Options>;
}
interface Options {
    runtime?: "globals" | {
        import: string;
    };
    runEarly?: boolean;
}
declare function legacyDecoratorCompat(babel: typeof Babel): Babel.PluginObj<State>;

export { type Options, legacyDecoratorCompat as default };
